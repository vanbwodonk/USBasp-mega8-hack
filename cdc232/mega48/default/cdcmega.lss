
cdcmega.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a1c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00000a1c  00000ab0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001d8  0080006c  0080006c  00000abc  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000ad0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  00000b10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001445  00000000  00000000  00000bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000817  00000000  00000000  00001ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000056c  00000000  00000000  0000280c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000170  00000000  00000000  00002d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006ab  00000000  00000000  00002ee8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d9d  00000000  00000000  00003593  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00004330  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	58 c0       	rjmp	.+176    	; 0xb2 <__ctors_end>
   2:	eb c1       	rjmp	.+982    	; 0x3da <__vector_1>
   4:	71 c0       	rjmp	.+226    	; 0xe8 <__bad_interrupt>
   6:	70 c0       	rjmp	.+224    	; 0xe8 <__bad_interrupt>
   8:	6f c0       	rjmp	.+222    	; 0xe8 <__bad_interrupt>
   a:	6e c0       	rjmp	.+220    	; 0xe8 <__bad_interrupt>
   c:	6d c0       	rjmp	.+218    	; 0xe8 <__bad_interrupt>
   e:	6c c0       	rjmp	.+216    	; 0xe8 <__bad_interrupt>
  10:	6b c0       	rjmp	.+214    	; 0xe8 <__bad_interrupt>
  12:	6a c0       	rjmp	.+212    	; 0xe8 <__bad_interrupt>
  14:	69 c0       	rjmp	.+210    	; 0xe8 <__bad_interrupt>
  16:	68 c0       	rjmp	.+208    	; 0xe8 <__bad_interrupt>
  18:	67 c0       	rjmp	.+206    	; 0xe8 <__bad_interrupt>
  1a:	66 c0       	rjmp	.+204    	; 0xe8 <__bad_interrupt>
  1c:	65 c0       	rjmp	.+202    	; 0xe8 <__bad_interrupt>
  1e:	64 c0       	rjmp	.+200    	; 0xe8 <__bad_interrupt>
  20:	63 c0       	rjmp	.+198    	; 0xe8 <__bad_interrupt>
  22:	62 c0       	rjmp	.+196    	; 0xe8 <__bad_interrupt>
  24:	61 c0       	rjmp	.+194    	; 0xe8 <__bad_interrupt>

00000026 <__trampolines_end>:
  26:	12 01       	movw	r2, r4
  28:	10 01       	movw	r2, r0
  2a:	02 00       	.word	0x0002	; ????
  2c:	00 08       	sbc	r0, r0
  2e:	c0 16       	cp	r12, r16
  30:	e1 05       	cpc	r30, r1
  32:	00 01       	movw	r0, r0
  34:	01 02       	muls	r16, r17
  36:	00 01       	movw	r0, r0

00000038 <usbDescriptorStringDevice>:
  38:	10 03 55 00 53 00 42 00 2d 00 32 00 33 00 32 00     ..U.S.B.-.2.3.2.

00000048 <usbDescriptorStringVendor>:
  48:	22 03 77 00 77 00 77 00 2e 00 72 00 65 00 63 00     ".w.w.w...r.e.c.
  58:	75 00 72 00 73 00 69 00 6f 00 6e 00 2e 00 6a 00     u.r.s.i.o.n...j.
  68:	70 00                                               p.

0000006a <usbDescriptorString0>:
  6a:	04 03 09 04                                         ....

0000006e <configDescrCDC>:
  6e:	09 02 43 00 02 01 00 80 32 09 04 00 00 01 02 02     ..C.....2.......
  7e:	01 00 05 24 00 10 01 04 24 02 02 05 24 06 00 01     ...$....$...$...
  8e:	05 24 01 03 01 07 05 83 03 08 00 ff 09 04 01 00     .$..............
  9e:	02 0a 00 00 00 07 05 01 02 08 00 00 07 05 81 02     ................
  ae:	08 00 00 00                                         ....

000000b2 <__ctors_end>:
  b2:	11 24       	eor	r1, r1
  b4:	1f be       	out	0x3f, r1	; 63
  b6:	cf e5       	ldi	r28, 0x5F	; 95
  b8:	d4 e0       	ldi	r29, 0x04	; 4
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	cd bf       	out	0x3d, r28	; 61

000000be <__do_copy_data>:
  be:	10 e0       	ldi	r17, 0x00	; 0
  c0:	a0 e6       	ldi	r26, 0x60	; 96
  c2:	b0 e0       	ldi	r27, 0x00	; 0
  c4:	ec e1       	ldi	r30, 0x1C	; 28
  c6:	fa e0       	ldi	r31, 0x0A	; 10
  c8:	02 c0       	rjmp	.+4      	; 0xce <__do_copy_data+0x10>
  ca:	05 90       	lpm	r0, Z+
  cc:	0d 92       	st	X+, r0
  ce:	ac 36       	cpi	r26, 0x6C	; 108
  d0:	b1 07       	cpc	r27, r17
  d2:	d9 f7       	brne	.-10     	; 0xca <__do_copy_data+0xc>

000000d4 <__do_clear_bss>:
  d4:	22 e0       	ldi	r18, 0x02	; 2
  d6:	ac e6       	ldi	r26, 0x6C	; 108
  d8:	b0 e0       	ldi	r27, 0x00	; 0
  da:	01 c0       	rjmp	.+2      	; 0xde <.do_clear_bss_start>

000000dc <.do_clear_bss_loop>:
  dc:	1d 92       	st	X+, r1

000000de <.do_clear_bss_start>:
  de:	a4 34       	cpi	r26, 0x44	; 68
  e0:	b2 07       	cpc	r27, r18
  e2:	e1 f7       	brne	.-8      	; 0xdc <.do_clear_bss_loop>
  e4:	2b d4       	rcall	.+2134   	; 0x93c <main>
  e6:	98 c4       	rjmp	.+2352   	; 0xa18 <_exit>

000000e8 <__bad_interrupt>:
  e8:	8b cf       	rjmp	.-234    	; 0x0 <__vectors>

000000ea <usbGenericSetInterrupt>:
/* ------------------------------------------------------------------------- */

#if !USB_CFG_SUPPRESS_INTR_CODE
#if USB_CFG_HAVE_INTRIN_ENDPOINT
static void usbGenericSetInterrupt(uchar *data, uchar len, usbTxStatus_t *txStatus)
{
  ea:	1f 93       	push	r17
  ec:	cf 93       	push	r28
  ee:	df 93       	push	r29
  f0:	16 2f       	mov	r17, r22
  f2:	ea 01       	movw	r28, r20

#if USB_CFG_IMPLEMENT_HALT
    if(usbTxLen1 == USBPID_STALL)
        return;
#endif
    if(txStatus->len & 0x10){   /* packet buffer was empty */
  f4:	28 81       	ld	r18, Y
  f6:	24 ff       	sbrs	r18, 4
  f8:	05 c0       	rjmp	.+10     	; 0x104 <usbGenericSetInterrupt+0x1a>
        txStatus->buffer[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* toggle token */
  fa:	39 81       	ldd	r19, Y+1	; 0x01
  fc:	28 e8       	ldi	r18, 0x88	; 136
  fe:	23 27       	eor	r18, r19
 100:	29 83       	std	Y+1, r18	; 0x01
 102:	02 c0       	rjmp	.+4      	; 0x108 <usbGenericSetInterrupt+0x1e>
    }else{
        txStatus->len = USBPID_NAK; /* avoid sending outdated (overwritten) interrupt data */
 104:	2a e5       	ldi	r18, 0x5A	; 90
 106:	28 83       	st	Y, r18
 108:	fc 01       	movw	r30, r24
    }
    p = txStatus->buffer + 1;
 10a:	ce 01       	movw	r24, r28
 10c:	02 96       	adiw	r24, 0x02	; 2
 10e:	dc 01       	movw	r26, r24
 110:	31 2f       	mov	r19, r17
 112:	38 0f       	add	r19, r24
    i = len;
    do{                         /* if len == 0, we still copy 1 byte, but that's no problem */
        *p++ = *data++;
 114:	21 91       	ld	r18, Z+
 116:	2d 93       	st	X+, r18
 118:	23 2f       	mov	r18, r19
 11a:	2a 1b       	sub	r18, r26
    }while(--i > 0);            /* loop control at the end is 2 bytes shorter than at beginning */
 11c:	12 16       	cp	r1, r18
 11e:	d4 f3       	brlt	.-12     	; 0x114 <usbGenericSetInterrupt+0x2a>
    usbCrc16Append(&txStatus->buffer[1], len);
 120:	61 2f       	mov	r22, r17
 122:	57 d1       	rcall	.+686    	; 0x3d2 <usbCrc16Append>
    txStatus->len = len + 4;    /* len must be given including sync byte */
 124:	1c 5f       	subi	r17, 0xFC	; 252
 126:	18 83       	st	Y, r17
    DBG2(0x21 + (((int)txStatus >> 3) & 3), txStatus->buffer, len + 3);
}
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	1f 91       	pop	r17
 12e:	08 95       	ret

00000130 <usbSetInterrupt>:

USB_PUBLIC void usbSetInterrupt(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus1);
 130:	4f e7       	ldi	r20, 0x7F	; 127
 132:	50 e0       	ldi	r21, 0x00	; 0
 134:	da cf       	rjmp	.-76     	; 0xea <usbGenericSetInterrupt>

00000136 <usbSetInterrupt3>:
#endif

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
USB_PUBLIC void usbSetInterrupt3(uchar *data, uchar len)
{
    usbGenericSetInterrupt(data, len, &usbTxStatus3);
 136:	4b ea       	ldi	r20, 0xAB	; 171
 138:	50 e0       	ldi	r21, 0x00	; 0
 13a:	d7 cf       	rjmp	.-82     	; 0xea <usbGenericSetInterrupt>

0000013c <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 140:	60 91 91 00 	lds	r22, 0x0091
 144:	63 50       	subi	r22, 0x03	; 3
    if(len >= 0){
 146:	67 fd       	sbrc	r22, 7
 148:	b5 c0       	rjmp	.+362    	; 0x2b4 <usbPoll+0x178>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 14a:	80 91 8e 00 	lds	r24, 0x008E
 14e:	cc e0       	ldi	r28, 0x0C	; 12
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	c8 1b       	sub	r28, r24
 154:	d1 09       	sbc	r29, r1
 156:	cb 56       	subi	r28, 0x6B	; 107
 158:	df 4f       	sbci	r29, 0xFF	; 255
 * 0...0x0f for OUT on endpoint X
 */
    DBG2(0x10 + (usbRxToken & 0xf), data, len + 2); /* SETUP=1d, SETUP-DATA=11, OUTx=1x */
    USB_RX_USER_HOOK(data, len)
#if USB_CFG_IMPLEMENT_FN_WRITEOUT
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
 15a:	80 91 8d 00 	lds	r24, 0x008D
 15e:	80 31       	cpi	r24, 0x10	; 16
 160:	18 f4       	brcc	.+6      	; 0x168 <usbPoll+0x2c>
        usbFunctionWriteOut(data, len);
 162:	ce 01       	movw	r24, r28
 164:	ce d3       	rcall	.+1948   	; 0x902 <usbFunctionWriteOut>
 166:	a0 c0       	rjmp	.+320    	; 0x2a8 <usbPoll+0x16c>
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 168:	8d 32       	cpi	r24, 0x2D	; 45
 16a:	09 f0       	breq	.+2      	; 0x16e <usbPoll+0x32>
 16c:	8e c0       	rjmp	.+284    	; 0x28a <usbPoll+0x14e>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 16e:	68 30       	cpi	r22, 0x08	; 8
 170:	09 f0       	breq	.+2      	; 0x174 <usbPoll+0x38>
 172:	9a c0       	rjmp	.+308    	; 0x2a8 <usbPoll+0x16c>
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 174:	83 ec       	ldi	r24, 0xC3	; 195
 176:	80 93 74 00 	sts	0x0074, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 17a:	8a e5       	ldi	r24, 0x5A	; 90
 17c:	80 93 61 00 	sts	0x0061, r24
        usbMsgFlags = 0;
 180:	10 92 8c 00 	sts	0x008C, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
 184:	88 81       	ld	r24, Y
 186:	80 76       	andi	r24, 0x60	; 96
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 188:	21 f0       	breq	.+8      	; 0x192 <usbPoll+0x56>
            replyLen = usbFunctionSetup(data);
 18a:	ce 01       	movw	r24, r28
 18c:	5c d3       	rcall	.+1720   	; 0x846 <usbFunctionSetup>
 18e:	98 2f       	mov	r25, r24
 190:	69 c0       	rjmp	.+210    	; 0x264 <usbPoll+0x128>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 192:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 194:	10 92 7d 00 	sts	0x007D, r1
    SWITCH_START(rq->bRequest)
 198:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 19a:	81 11       	cpse	r24, r1
 19c:	06 c0       	rjmp	.+12     	; 0x1aa <usbPoll+0x6e>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 19e:	10 92 7e 00 	sts	0x007E, r1
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 1a2:	2d e7       	ldi	r18, 0x7D	; 125
 1a4:	30 e0       	ldi	r19, 0x00	; 0
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
        len = 2;
 1a6:	92 e0       	ldi	r25, 0x02	; 2
 1a8:	58 c0       	rjmp	.+176    	; 0x25a <usbPoll+0x11e>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 1aa:	85 30       	cpi	r24, 0x05	; 5
 1ac:	19 f4       	brne	.+6      	; 0x1b4 <usbPoll+0x78>
        usbNewDeviceAddr = value;
 1ae:	90 93 92 00 	sts	0x0092, r25
 1b2:	50 c0       	rjmp	.+160    	; 0x254 <usbPoll+0x118>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 1b4:	86 30       	cpi	r24, 0x06	; 6
 1b6:	b1 f5       	brne	.+108    	; 0x224 <usbPoll+0xe8>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 1b8:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	41 f4       	brne	.+16     	; 0x1ce <usbPoll+0x92>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 1be:	86 e2       	ldi	r24, 0x26	; 38
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	90 93 90 00 	sts	0x0090, r25
 1c6:	80 93 8f 00 	sts	0x008F, r24
 1ca:	92 e1       	ldi	r25, 0x12	; 18
 1cc:	27 c0       	rjmp	.+78     	; 0x21c <usbPoll+0xe0>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 1ce:	82 30       	cpi	r24, 0x02	; 2
 1d0:	21 f4       	brne	.+8      	; 0x1da <usbPoll+0x9e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 1d2:	ce 01       	movw	r24, r28
 1d4:	23 d3       	rcall	.+1606   	; 0x81c <usbFunctionDescriptor>
 1d6:	98 2f       	mov	r25, r24
 1d8:	21 c0       	rjmp	.+66     	; 0x21c <usbPoll+0xe0>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 1da:	83 30       	cpi	r24, 0x03	; 3
 1dc:	f1 f4       	brne	.+60     	; 0x21a <usbPoll+0xde>
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
        SWITCH_CASE(0)
 1de:	91 11       	cpse	r25, r1
 1e0:	08 c0       	rjmp	.+16     	; 0x1f2 <usbPoll+0xb6>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 1e2:	8a e6       	ldi	r24, 0x6A	; 106
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	90 93 90 00 	sts	0x0090, r25
 1ea:	80 93 8f 00 	sts	0x008F, r24
 1ee:	94 e0       	ldi	r25, 0x04	; 4
 1f0:	15 c0       	rjmp	.+42     	; 0x21c <usbPoll+0xe0>
        SWITCH_CASE(1)
 1f2:	91 30       	cpi	r25, 0x01	; 1
 1f4:	41 f4       	brne	.+16     	; 0x206 <usbPoll+0xca>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 1f6:	88 e4       	ldi	r24, 0x48	; 72
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	90 93 90 00 	sts	0x0090, r25
 1fe:	80 93 8f 00 	sts	0x008F, r24
 202:	92 e2       	ldi	r25, 0x22	; 34
 204:	0b c0       	rjmp	.+22     	; 0x21c <usbPoll+0xe0>
        SWITCH_CASE(2)
 206:	92 30       	cpi	r25, 0x02	; 2
 208:	41 f4       	brne	.+16     	; 0x21a <usbPoll+0xde>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 20a:	88 e3       	ldi	r24, 0x38	; 56
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	90 93 90 00 	sts	0x0090, r25
 212:	80 93 8f 00 	sts	0x008F, r24
 216:	90 e1       	ldi	r25, 0x10	; 16
 218:	01 c0       	rjmp	.+2      	; 0x21c <usbPoll+0xe0>
/* usbDriverDescriptor() is similar to usbFunctionDescriptor(), but used
 * internally for all types of descriptors.
 */
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 21a:	90 e0       	ldi	r25, 0x00	; 0
                flags = 0;
            }
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 21c:	80 e4       	ldi	r24, 0x40	; 64
 21e:	80 93 8c 00 	sts	0x008C, r24
 222:	20 c0       	rjmp	.+64     	; 0x264 <usbPoll+0x128>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 224:	88 30       	cpi	r24, 0x08	; 8
 226:	79 f0       	breq	.+30     	; 0x246 <usbPoll+0x10a>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 228:	89 30       	cpi	r24, 0x09	; 9
 22a:	19 f4       	brne	.+6      	; 0x232 <usbPoll+0xf6>
        usbConfiguration = value;
 22c:	90 93 94 00 	sts	0x0094, r25
 230:	11 c0       	rjmp	.+34     	; 0x254 <usbPoll+0x118>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 232:	8a 30       	cpi	r24, 0x0A	; 10
 234:	59 f0       	breq	.+22     	; 0x24c <usbPoll+0x110>
        len = 1;
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    SWITCH_CASE(USBRQ_SET_INTERFACE)        /* 11 */
 236:	8b 30       	cpi	r24, 0x0B	; 11
 238:	69 f4       	brne	.+26     	; 0x254 <usbPoll+0x118>
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 23a:	8b e4       	ldi	r24, 0x4B	; 75
 23c:	80 93 80 00 	sts	0x0080, r24
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 240:	80 93 ac 00 	sts	0x00AC, r24
 244:	07 c0       	rjmp	.+14     	; 0x254 <usbPoll+0x118>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
        dataPtr = &usbConfiguration;  /* send current configuration value */
 246:	24 e9       	ldi	r18, 0x94	; 148
 248:	30 e0       	ldi	r19, 0x00	; 0
 24a:	02 c0       	rjmp	.+4      	; 0x250 <usbPoll+0x114>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 24c:	2d e7       	ldi	r18, 0x7D	; 125
 24e:	30 e0       	ldi	r19, 0x00	; 0
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
        usbConfiguration = value;
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
        len = 1;
 250:	91 e0       	ldi	r25, 0x01	; 1
 252:	03 c0       	rjmp	.+6      	; 0x25a <usbPoll+0x11e>
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
 254:	2d e7       	ldi	r18, 0x7D	; 125
 256:	30 e0       	ldi	r19, 0x00	; 0
/* usbDriverSetup() is similar to usbFunctionSetup(), but it's used for
 * standard requests instead of class and custom requests.
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
 258:	90 e0       	ldi	r25, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
 25a:	30 93 90 00 	sts	0x0090, r19
 25e:	20 93 8f 00 	sts	0x008F, r18
 262:	09 c0       	rjmp	.+18     	; 0x276 <usbPoll+0x13a>
            replyLen = usbFunctionSetup(data);
        }else{
            replyLen = usbDriverSetup(rq);
        }
#if USB_CFG_IMPLEMENT_FN_READ || USB_CFG_IMPLEMENT_FN_WRITE
        if(replyLen == USB_NO_MSG){         /* use user-supplied read/write function */
 264:	9f 3f       	cpi	r25, 0xFF	; 255
 266:	39 f4       	brne	.+14     	; 0x276 <usbPoll+0x13a>
            /* do some conditioning on replyLen, but on IN transfers only */
            if((rq->bmRequestType & USBRQ_DIR_MASK) != USBRQ_DIR_HOST_TO_DEVICE){
 268:	88 81       	ld	r24, Y
 26a:	87 fd       	sbrc	r24, 7
                if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
                    replyLen = rq->wLength.bytes[0];
 26c:	9e 81       	ldd	r25, Y+6	; 0x06
                }else{
                    replyLen = rq->wLength.word;
                }
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
 26e:	80 e8       	ldi	r24, 0x80	; 128
 270:	80 93 8c 00 	sts	0x008C, r24
 274:	07 c0       	rjmp	.+14     	; 0x284 <usbPoll+0x148>
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 276:	8f 81       	ldd	r24, Y+7	; 0x07
 278:	81 11       	cpse	r24, r1
 27a:	04 c0       	rjmp	.+8      	; 0x284 <usbPoll+0x148>
 27c:	8e 81       	ldd	r24, Y+6	; 0x06
 27e:	89 17       	cp	r24, r25
 280:	08 f4       	brcc	.+2      	; 0x284 <usbPoll+0x148>
 282:	98 2f       	mov	r25, r24
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 284:	90 93 60 00 	sts	0x0060, r25
 288:	0f c0       	rjmp	.+30     	; 0x2a8 <usbPoll+0x16c>
    }else{  /* usbRxToken must be USBPID_OUT, which means data phase of setup (control-out) */
#if USB_CFG_IMPLEMENT_FN_WRITE
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 28a:	80 91 8c 00 	lds	r24, 0x008C
 28e:	87 ff       	sbrs	r24, 7
 290:	0b c0       	rjmp	.+22     	; 0x2a8 <usbPoll+0x16c>
            uchar rval = usbFunctionWrite(data, len);
 292:	ce 01       	movw	r24, r28
 294:	15 d3       	rcall	.+1578   	; 0x8c0 <usbFunctionWrite>
            if(rval == 0xff){   /* an error occurred */
 296:	8f 3f       	cpi	r24, 0xFF	; 255
 298:	21 f4       	brne	.+8      	; 0x2a2 <usbPoll+0x166>
                usbTxLen = USBPID_STALL;
 29a:	8e e1       	ldi	r24, 0x1E	; 30
 29c:	80 93 61 00 	sts	0x0061, r24
 2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <usbPoll+0x16c>
            }else if(rval != 0){    /* This was the final package */
 2a2:	81 11       	cpse	r24, r1
                usbMsgLen = 0;  /* answer with a zero-sized data packet */
 2a4:	10 92 60 00 	sts	0x0060, r1
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
 2a8:	80 91 91 00 	lds	r24, 0x0091
 2ac:	18 16       	cp	r1, r24
 2ae:	14 f4       	brge	.+4      	; 0x2b4 <usbPoll+0x178>
            usbRxLen = 0;
 2b0:	10 92 91 00 	sts	0x0091, r1
#else
        usbRxLen = 0;       /* mark rx buffer as available */
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 2b4:	80 91 61 00 	lds	r24, 0x0061
 2b8:	84 ff       	sbrs	r24, 4
 2ba:	56 c0       	rjmp	.+172    	; 0x368 <usbPoll+0x22c>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 2bc:	80 91 60 00 	lds	r24, 0x0060
 2c0:	8f 3f       	cpi	r24, 0xFF	; 255
 2c2:	09 f4       	brne	.+2      	; 0x2c6 <usbPoll+0x18a>
 2c4:	51 c0       	rjmp	.+162    	; 0x368 <usbPoll+0x22c>
 2c6:	c8 2f       	mov	r28, r24
 2c8:	89 30       	cpi	r24, 0x09	; 9
 2ca:	08 f0       	brcs	.+2      	; 0x2ce <usbPoll+0x192>
 2cc:	c8 e0       	ldi	r28, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 2ce:	8c 1b       	sub	r24, r28
 2d0:	80 93 60 00 	sts	0x0060, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 2d4:	90 91 74 00 	lds	r25, 0x0074
 2d8:	88 e8       	ldi	r24, 0x88	; 136
 2da:	89 27       	eor	r24, r25
 2dc:	80 93 74 00 	sts	0x0074, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 2e0:	cc 23       	and	r28, r28
 2e2:	89 f1       	breq	.+98     	; 0x346 <usbPoll+0x20a>
#if USB_CFG_IMPLEMENT_FN_READ
        if(usbMsgFlags & USB_FLG_USE_USER_RW){
 2e4:	20 91 8c 00 	lds	r18, 0x008C
 2e8:	27 ff       	sbrs	r18, 7
 2ea:	08 c0       	rjmp	.+16     	; 0x2fc <usbPoll+0x1c0>
            len = usbFunctionRead(data, len);
 2ec:	6c 2f       	mov	r22, r28
 2ee:	85 e7       	ldi	r24, 0x75	; 117
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	cb d2       	rcall	.+1430   	; 0x88a <usbFunctionRead>
 2f4:	c8 2f       	mov	r28, r24
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
 2f6:	89 30       	cpi	r24, 0x09	; 9
 2f8:	88 f5       	brcc	.+98     	; 0x35c <usbPoll+0x220>
 2fa:	25 c0       	rjmp	.+74     	; 0x346 <usbPoll+0x20a>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
 2fc:	80 91 8f 00 	lds	r24, 0x008F
 300:	90 91 90 00 	lds	r25, 0x0090
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 304:	26 ff       	sbrs	r18, 6
 306:	0b c0       	rjmp	.+22     	; 0x31e <usbPoll+0x1e2>
 308:	a5 e7       	ldi	r26, 0x75	; 117
 30a:	b0 e0       	ldi	r27, 0x00	; 0
 30c:	fc 01       	movw	r30, r24
 30e:	2c 2f       	mov	r18, r28
 310:	28 0f       	add	r18, r24
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 312:	34 91       	lpm	r19, Z
                    *data++ = c;
 314:	3d 93       	st	X+, r19
                    r++;
 316:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 318:	2e 13       	cpse	r18, r30
 31a:	fb cf       	rjmp	.-10     	; 0x312 <usbPoll+0x1d6>
 31c:	09 c0       	rjmp	.+18     	; 0x330 <usbPoll+0x1f4>
 31e:	dc 01       	movw	r26, r24
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 320:	e5 e7       	ldi	r30, 0x75	; 117
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	2c 2f       	mov	r18, r28
 326:	2e 0f       	add	r18, r30
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
 328:	3d 91       	ld	r19, X+
 32a:	31 93       	st	Z+, r19
                    r++;
                }while(--i);
 32c:	2e 13       	cpse	r18, r30
 32e:	fc cf       	rjmp	.-8      	; 0x328 <usbPoll+0x1ec>
 330:	2f ef       	ldi	r18, 0xFF	; 255
 332:	2c 0f       	add	r18, r28
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	2f 5f       	subi	r18, 0xFF	; 255
 338:	3f 4f       	sbci	r19, 0xFF	; 255
 33a:	82 0f       	add	r24, r18
 33c:	93 1f       	adc	r25, r19
            }
            usbMsgPtr = r;
 33e:	90 93 90 00 	sts	0x0090, r25
 342:	80 93 8f 00 	sts	0x008F, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 346:	6c 2f       	mov	r22, r28
 348:	85 e7       	ldi	r24, 0x75	; 117
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	42 d0       	rcall	.+132    	; 0x3d2 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 34e:	cc 5f       	subi	r28, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 350:	cc 30       	cpi	r28, 0x0C	; 12
 352:	41 f0       	breq	.+16     	; 0x364 <usbPoll+0x228>
            usbMsgLen = USB_NO_MSG;
 354:	8f ef       	ldi	r24, 0xFF	; 255
 356:	80 93 60 00 	sts	0x0060, r24
 35a:	04 c0       	rjmp	.+8      	; 0x364 <usbPoll+0x228>
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
 35c:	8f ef       	ldi	r24, 0xFF	; 255
 35e:	80 93 60 00 	sts	0x0060, r24
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
 362:	ce e1       	ldi	r28, 0x1E	; 30
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 364:	c0 93 61 00 	sts	0x0061, r28
        usbCrc16Append(&usbTxBuf[1], len);
        len += 4;           /* length including sync byte */
        if(len < 12)        /* a partial package identifies end of message */
            usbMsgLen = USB_NO_MSG;
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
 368:	84 e1       	ldi	r24, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 36a:	96 b3       	in	r25, 0x16	; 22
 36c:	93 70       	andi	r25, 0x03	; 3
        if(usbLineStatus != 0)  /* SE0 has ended */
 36e:	31 f4       	brne	.+12     	; 0x37c <usbPoll+0x240>
 370:	81 50       	subi	r24, 0x01	; 1
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 372:	d9 f7       	brne	.-10     	; 0x36a <usbPoll+0x22e>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 374:	10 92 92 00 	sts	0x0092, r1
    usbDeviceAddr = 0;
 378:	10 92 8b 00 	sts	0x008B, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 37c:	df 91       	pop	r29
 37e:	cf 91       	pop	r28
 380:	08 95       	ret

00000382 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 382:	85 b7       	in	r24, 0x35	; 53
 384:	82 60       	ori	r24, 0x02	; 2
 386:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 388:	8b b7       	in	r24, 0x3b	; 59
 38a:	80 64       	ori	r24, 0x40	; 64
 38c:	8b bf       	out	0x3b, r24	; 59
/* ------------------------------------------------------------------------- */

static inline void  usbResetDataToggling(void)
{
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    USB_SET_DATATOKEN1(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 38e:	af e7       	ldi	r26, 0x7F	; 127
 390:	b0 e0       	ldi	r27, 0x00	; 0
 392:	8b e4       	ldi	r24, 0x4B	; 75
 394:	11 96       	adiw	r26, 0x01	; 1
 396:	8c 93       	st	X, r24
 398:	11 97       	sbiw	r26, 0x01	; 1
#   if USB_CFG_HAVE_INTRIN_ENDPOINT3
    USB_SET_DATATOKEN3(USB_INITIAL_DATATOKEN);  /* reset data toggling for interrupt endpoint */
 39a:	eb ea       	ldi	r30, 0xAB	; 171
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	81 83       	std	Z+1, r24	; 0x01
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
    usbResetDataToggling();
#if USB_CFG_HAVE_INTRIN_ENDPOINT && !USB_CFG_SUPPRESS_INTR_CODE
    usbTxLen1 = USBPID_NAK;
 3a0:	8a e5       	ldi	r24, 0x5A	; 90
 3a2:	8c 93       	st	X, r24
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
 3a4:	80 83       	st	Z, r24
 3a6:	08 95       	ret

000003a8 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 3a8:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 3aa:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 3ac:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 3ae:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 3b0:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 3b2:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 3b4:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 3b6:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 3b8:	09 c0       	rjmp	.+18     	; 0x3cc <usbCrcLoopEntry>

000003ba <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 3ba:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 3bc:	82 27       	eor	r24, r18

000003be <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 3be:	97 95       	ror	r25
    ror     resCrcL
 3c0:	87 95       	ror	r24
    brcs    usbCrcNoXor
 3c2:	10 f0       	brcs	.+4      	; 0x3c8 <usbCrcNoXor>
    eor     resCrcL, polyL
 3c4:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 3c6:	95 27       	eor	r25, r21

000003c8 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 3c8:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 3ca:	c8 f3       	brcs	.-14     	; 0x3be <usbCrcBitLoop>

000003cc <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 3cc:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 3ce:	a8 f3       	brcs	.-22     	; 0x3ba <usbCrcByteLoop>

000003d0 <usbCrcReady>:
usbCrcReady:
    ret
 3d0:	08 95       	ret

000003d2 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 3d2:	ea df       	rcall	.-44     	; 0x3a8 <usbCrc16>
    st      ptr+, resCrcL
 3d4:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 3d6:	9d 93       	st	X+, r25
    ret
 3d8:	08 95       	ret

000003da <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
 3da:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
 3dc:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
 3de:	cf 93       	push	r28

000003e0 <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 3e0:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 3e2:	b0 9b       	sbis	0x16, 0	; 22
    brne    waitForJ        ; just make sure we have ANY timeout
 3e4:	e9 f7       	brne	.-6      	; 0x3e0 <waitForJ>

000003e6 <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
 3e6:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 3e8:	09 c0       	rjmp	.+18     	; 0x3fc <foundK>
    sbis    USBIN, USBMINUS
 3ea:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 3ec:	07 c0       	rjmp	.+14     	; 0x3fc <foundK>
    sbis    USBIN, USBMINUS
 3ee:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 3f0:	05 c0       	rjmp	.+10     	; 0x3fc <foundK>
    sbis    USBIN, USBMINUS
 3f2:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 3f4:	03 c0       	rjmp	.+6      	; 0x3fc <foundK>
    sbis    USBIN, USBMINUS
 3f6:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    foundK
 3f8:	01 c0       	rjmp	.+2      	; 0x3fc <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 3fa:	a6 c0       	rjmp	.+332    	; 0x548 <sofError>

000003fc <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
 3fc:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
 3fe:	c0 91 8e 00 	lds	r28, 0x008E
    clr     YH                  ;1 [5]
 402:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
 404:	cb 56       	subi	r28, 0x6B	; 107
    sbci    YH, hi8(-(usbRxBuf));1 [7]
 406:	df 4f       	sbci	r29, 0xFF	; 255

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
 408:	b0 9b       	sbis	0x16, 0	; 22
    rjmp    haveTwoBitsK    ;2 [10]
 40a:	02 c0       	rjmp	.+4      	; 0x410 <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
 40c:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
 40e:	eb cf       	rjmp	.-42     	; 0x3e6 <waitForK>

00000410 <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
 410:	2f 93       	push	r18
    push    x1              ;2 [12]
 412:	0f 93       	push	r16
    push    x2              ;2 [14]
 414:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
 416:	06 b3       	in	r16, 0x16	; 22
    ldi     shift, 0xff     ;1 [18]
 418:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
 41a:	00 fb       	bst	r16, 0
    bld     shift, 0        ;1 [20]
 41c:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
 41e:	4f 93       	push	r20
    push    cnt             ;2 [24]
 420:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
 422:	16 b3       	in	r17, 0x16	; 22
    ser     x3              ;1 [26] [inserted init instruction]
 424:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
 426:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
 428:	00 fb       	bst	r16, 0
    bld     shift, 1        ;1 [29]
 42a:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
 42c:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
 42e:	31 c0       	rjmp	.+98     	; 0x492 <rxbit2>

00000430 <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
 430:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
 432:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
 434:	16 b3       	in	r17, 0x16	; 22
    ori     shift, 0x01 ;1 [18]
 436:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
 438:	28 c0       	rjmp	.+80     	; 0x48a <didUnstuff0>

0000043a <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
 43a:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
 43c:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
 43e:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
 440:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
 442:	06 b3       	in	r16, 0x16	; 22
    rjmp    didUnstuff1 ;2 [27]
 444:	29 c0       	rjmp	.+82     	; 0x498 <didUnstuff1>

00000446 <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
 446:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
 448:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
 44a:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
 44c:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
 44e:	16 b3       	in	r17, 0x16	; 22
    rjmp    didUnstuff2 ;2 [35]
 450:	2b c0       	rjmp	.+86     	; 0x4a8 <didUnstuff2>

00000452 <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
 452:	16 b3       	in	r17, 0x16	; 22
    andi    x3, ~0x08   ;1 [35]
 454:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
 456:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
 458:	2a c0       	rjmp	.+84     	; 0x4ae <didUnstuff3>

0000045a <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
 45a:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
 45c:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x10 ;1 [42]
 45e:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
 460:	2c c0       	rjmp	.+88     	; 0x4ba <didUnstuff4>

00000462 <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
 462:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
 464:	16 b3       	in	r17, 0x16	; 22
    ori     shift, 0x20 ;1 [50]
 466:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
 468:	2f c0       	rjmp	.+94     	; 0x4c8 <didUnstuff5>

0000046a <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
 46a:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
 46c:	06 b3       	in	r16, 0x16	; 22
    ori     shift, 0x40 ;1 [58]
 46e:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
 470:	32 c0       	rjmp	.+100    	; 0x4d6 <didUnstuff6>

00000472 <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 472:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
 474:	06 b3       	in	r16, 0x16	; 22
    st      y+, x3      ;2 [3] store data
 476:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
 478:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
 47a:	00 00       	nop
    eor     x2, x1      ;1 [6]
 47c:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
 47e:	10 fb       	bst	r17, 0
    bld     shift, 0    ;1 [8]
 480:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
 482:	16 b3       	in	r17, 0x16	; 22
    andi    x2, USBMASK ;1 [10]
 484:	13 70       	andi	r17, 0x03	; 3
    breq    se0         ;1 [11] SE0 check for bit 1
 486:	c9 f1       	breq	.+114    	; 0x4fa <se0>
    andi    shift, 0xf9 ;1 [12]
 488:	29 7f       	andi	r18, 0xF9	; 249

0000048a <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
 48a:	91 f2       	breq	.-92     	; 0x430 <unstuff0>
    eor     x1, x2      ;1 [14]
 48c:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
 48e:	00 fb       	bst	r16, 0
    bld     shift, 1    ;1 [16]
 490:	21 f9       	bld	r18, 1

00000492 <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
 492:	06 b3       	in	r16, 0x16	; 22
    andi    shift, 0xf3 ;1 [18]
 494:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
 496:	89 f2       	breq	.-94     	; 0x43a <unstuff1>

00000498 <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
 498:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
 49a:	58 f1       	brcs	.+86     	; 0x4f2 <overflow>
    eor     x2, x1      ;1 [22]
 49c:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
 49e:	10 fb       	bst	r17, 0
    bld     shift, 2    ;1 [24]
 4a0:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
 4a2:	16 b3       	in	r17, 0x16	; 22
    andi    shift, 0xe7 ;1 [26]
 4a4:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
 4a6:	79 f2       	breq	.-98     	; 0x446 <unstuff2>

000004a8 <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
 4a8:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
 4aa:	00 fb       	bst	r16, 0
    bld     shift, 3    ;1 [30]
 4ac:	23 f9       	bld	r18, 3

000004ae <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
 4ae:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
 4b0:	81 f2       	breq	.-96     	; 0x452 <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
 4b2:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1      ;1 [34]
 4b4:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
 4b6:	10 fb       	bst	r17, 0
    bld     shift, 4    ;1 [36]
 4b8:	24 f9       	bld	r18, 4

000004ba <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
 4ba:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
 4bc:	71 f2       	breq	.-100    	; 0x45a <unstuff4>
    nop2                ;2 [40]
 4be:	00 c0       	rjmp	.+0      	; 0x4c0 <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
 4c0:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2      ;1 [42]
 4c2:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
 4c4:	00 fb       	bst	r16, 0
    bld     shift, 5    ;1 [44]
 4c6:	25 f9       	bld	r18, 5

000004c8 <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
 4c8:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
 4ca:	59 f2       	breq	.-106    	; 0x462 <unstuff5>
    nop2                ;2 [48]
 4cc:	00 c0       	rjmp	.+0      	; 0x4ce <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
 4ce:	06 b3       	in	r16, 0x16	; 22
    eor     x2, x1      ;1 [50]
 4d0:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
 4d2:	10 fb       	bst	r17, 0
    bld     shift, 6    ;1 [52]
 4d4:	26 f9       	bld	r18, 6

000004d6 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
 4d6:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
 4d8:	40 f2       	brcs	.-112    	; 0x46a <unstuff6>
    nop2                ;2 [56]
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
 4dc:	16 b3       	in	r17, 0x16	; 22
    eor     x1, x2      ;1 [58]
 4de:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
 4e0:	00 fb       	bst	r16, 0
    bld     shift, 7    ;1 [60]
 4e2:	27 f9       	bld	r18, 7

000004e4 <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
 4e4:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
 4e6:	28 f6       	brcc	.-118    	; 0x472 <rxLoop>

000004e8 <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
 4e8:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
 4ea:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
 4ec:	16 b3       	in	r17, 0x16	; 22
    nop                 ;1 [66]
 4ee:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
 4f0:	f9 cf       	rjmp	.-14     	; 0x4e4 <didUnstuff7>

000004f2 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 4f2:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 4f4:	1a bf       	out	0x3a, r17	; 58

000004f6 <ignorePacket>:
ignorePacket:
    clr     token
 4f6:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 4f8:	1c c0       	rjmp	.+56     	; 0x532 <storeTokenAndReturn>

000004fa <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 4fa:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 4fc:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 4fe:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 500:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 502:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 504:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
 506:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 508:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 50a:	11 f1       	breq	.+68     	; 0x550 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 50c:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 50e:	01 f1       	breq	.+64     	; 0x550 <handleData>
    lds     shift, usbDeviceAddr;[17]
 510:	20 91 8b 00 	lds	r18, 0x008B
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 514:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 516:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 518:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 51a:	ed cf       	rjmp	.-38     	; 0x4f6 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
 51c:	4a 81       	ldd	r20, Y+2	; 0x02
    rol     x3                  ;[26] shift in LSB of endpoint
 51e:	44 1f       	adc	r20, r20
#endif
    cpi     token, USBPID_IN    ;[27]
 520:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 522:	59 f1       	breq	.+86     	; 0x57a <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 524:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 526:	11 f0       	breq	.+4      	; 0x52c <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 528:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 52a:	29 f7       	brne	.-54     	; 0x4f6 <ignorePacket>

0000052c <handleSetupOrOut>:
;Setup and Out are followed by a data packet two bit times (16 cycles) after
;the end of SE0. The sync code allows up to 40 cycles delay from the start of
;the sync pattern until the first bit is sampled. That's a total of 56 cycles.
handleSetupOrOut:               ;[32]
#if USB_CFG_IMPLEMENT_FN_WRITEOUT   /* if we have data for endpoint != 0, set usbCurrentTok to address */
    andi    x3, 0xf             ;[32]
 52c:	4f 70       	andi	r20, 0x0F	; 15
    breq    storeTokenAndReturn ;[33]
 52e:	09 f0       	breq	.+2      	; 0x532 <storeTokenAndReturn>
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
 530:	04 2f       	mov	r16, r20

00000532 <storeTokenAndReturn>:
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 532:	00 93 93 00 	sts	0x0093, r16

00000536 <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 536:	3f 91       	pop	r19
 538:	4f 91       	pop	r20
 53a:	1f 91       	pop	r17
 53c:	0f 91       	pop	r16
 53e:	2f 91       	pop	r18
 540:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
 542:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 544:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 546:	4c cf       	rjmp	.-360    	; 0x3e0 <waitForJ>

00000548 <sofError>:
sofError:
    POP_RETI                    ;macro call
 548:	cf 91       	pop	r28
 54a:	cf bf       	out	0x3f, r28	; 63
 54c:	cf 91       	pop	r28
    reti
 54e:	18 95       	reti

00000550 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 550:	20 91 93 00 	lds	r18, 0x0093
    tst     shift               ;[20]
 554:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 556:	79 f3       	breq	.-34     	; 0x536 <doReturn>
    lds     x2, usbRxLen        ;[22]
 558:	10 91 91 00 	lds	r17, 0x0091
    tst     x2                  ;[24]
 55c:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 55e:	c1 f5       	brne	.+112    	; 0x5d0 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 560:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 562:	c2 f1       	brmi	.+112    	; 0x5d4 <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 564:	30 93 91 00 	sts	0x0091, r19
    sts     usbRxToken, shift   ;[30]
 568:	20 93 8d 00 	sts	0x008D, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
 56c:	10 91 8e 00 	lds	r17, 0x008E
    ldi     cnt, USB_BUFSIZE    ;[34]
 570:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 572:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 574:	30 93 8e 00 	sts	0x008E, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 578:	2d c0       	rjmp	.+90     	; 0x5d4 <sendAckAndReti>

0000057a <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 57a:	00 91 91 00 	lds	r16, 0x0091
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 57e:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 580:	3c f5       	brge	.+78     	; 0x5d0 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 582:	0a e5       	ldi	r16, 0x5A	; 90
#if USB_CFG_HAVE_INTRIN_ENDPOINT
    andi    x3, 0xf             ;[35] x3 contains endpoint
 584:	4f 70       	andi	r20, 0x0F	; 15
#if USB_CFG_SUPPRESS_INTR_CODE
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
 586:	49 f4       	brne	.+18     	; 0x59a <handleIn1>
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 588:	30 91 61 00 	lds	r19, 0x0061
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 58c:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 58e:	24 c0       	rjmp	.+72     	; 0x5d8 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 590:	00 93 61 00 	sts	0x0061, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
 594:	c4 e7       	ldi	r28, 0x74	; 116
    ldi     YH, hi8(usbTxBuf)   ;[44]
 596:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 598:	23 c0       	rjmp	.+70     	; 0x5e0 <usbSendAndReti>

0000059a <handleIn1>:

#if !USB_CFG_SUPPRESS_INTR_CODE && USB_CFG_HAVE_INTRIN_ENDPOINT /* placed here due to relative jump range */
handleIn1:                      ;[38]
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
; 2006-06-10 as suggested by O.Tamura: support second INTR IN / BULK IN endpoint
    cpi     x3, USB_CFG_EP3_NUMBER;[38]
 59a:	43 30       	cpi	r20, 0x03	; 3
    breq    handleIn3           ;[39]
 59c:	49 f0       	breq	.+18     	; 0x5b0 <handleIn3>
#endif
    lds     cnt, usbTxLen1      ;[40]
 59e:	30 91 7f 00 	lds	r19, 0x007F
    sbrc    cnt, 4              ;[42] all handshake tokens have bit 4 set
 5a2:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[43] 47 + 16 = 63 until SOP
 5a4:	19 c0       	rjmp	.+50     	; 0x5d8 <sendCntAndReti>
    sts     usbTxLen1, x1       ;[44] x1 == USBPID_NAK from above
 5a6:	00 93 7f 00 	sts	0x007F, r16
    ldi     YL, lo8(usbTxBuf1)  ;[46]
 5aa:	c0 e8       	ldi	r28, 0x80	; 128
    ldi     YH, hi8(usbTxBuf1)  ;[47]
 5ac:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[48] 50 + 12 = 62 until SOP
 5ae:	18 c0       	rjmp	.+48     	; 0x5e0 <usbSendAndReti>

000005b0 <handleIn3>:

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
handleIn3:
    lds     cnt, usbTxLen3      ;[41]
 5b0:	30 91 ab 00 	lds	r19, 0x00AB
    sbrc    cnt, 4              ;[43]
 5b4:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[44] 49 + 16 = 65 until SOP
 5b6:	10 c0       	rjmp	.+32     	; 0x5d8 <sendCntAndReti>
    sts     usbTxLen3, x1       ;[45] x1 == USBPID_NAK from above
 5b8:	00 93 ab 00 	sts	0x00AB, r16
    ldi     YL, lo8(usbTxBuf3)  ;[47]
 5bc:	cc ea       	ldi	r28, 0xAC	; 172
    ldi     YH, hi8(usbTxBuf3)  ;[48]
 5be:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[49] 51 + 12 = 63 until SOP
 5c0:	0f c0       	rjmp	.+30     	; 0x5e0 <usbSendAndReti>

000005c2 <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
 5c2:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
 5c4:	a8 f4       	brcc	.+42     	; 0x5f0 <doExorN1>
    subi    x4, 1               ;[-3]
 5c6:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
 5c8:	a9 f4       	brne	.+42     	; 0x5f4 <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
 5ca:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
 5cc:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
 5ce:	f9 cf       	rjmp	.-14     	; 0x5c2 <stuffN1Delay>

000005d0 <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
 5d0:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
 5d2:	03 c0       	rjmp	.+6      	; 0x5da <usbSendX3>

000005d4 <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
 5d4:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
 5d6:	01 c0       	rjmp	.+2      	; 0x5da <usbSendX3>

000005d8 <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
 5d8:	43 2f       	mov	r20, r19

000005da <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
 5da:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
 5dc:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
 5de:	32 e0       	ldi	r19, 0x02	; 2

000005e0 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
 5e0:	17 b3       	in	r17, 0x17	; 23
    ori     x2, USBMASK         ;[-11]
 5e2:	13 60       	ori	r17, 0x03	; 3
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 5e4:	c0 9a       	sbi	0x18, 0	; 24
    out     USBDDR, x2          ;[-8] <--- acquire bus
 5e6:	17 bb       	out	0x17, r17	; 23
    in      x1, USBOUT          ;[-7] port mirror for tx loop
 5e8:	08 b3       	in	r16, 0x18	; 24
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
 5ea:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
 5ec:	13 e0       	ldi	r17, 0x03	; 3
    push    x4                  ;[-4]
 5ee:	5f 93       	push	r21

000005f0 <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
 5f0:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
 5f2:	56 e0       	ldi	r21, 0x06	; 6

000005f4 <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
 5f4:	08 bb       	out	0x18, r16	; 24
    ror     shift               ;[01]
 5f6:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
 5f8:	20 f4       	brcc	.+8      	; 0x602 <doExorN2>
    subi    x4, 1               ;[03]
 5fa:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
 5fc:	21 f4       	brne	.+8      	; 0x606 <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
 5fe:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
 600:	f9 cf       	rjmp	.-14     	; 0x5f4 <commonN1>

00000602 <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
 602:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
 604:	56 e0       	ldi	r21, 0x06	; 6

00000606 <commonN2>:
commonN2:
    nop                         ;[06] [14]
 606:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
 608:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
 60a:	08 bb       	out	0x18, r16	; 24
    brcs    txBitloop           ;[09]      [25] [41]
 60c:	d0 f2       	brcs	.-76     	; 0x5c2 <stuffN1Delay>

0000060e <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
 60e:	27 95       	ror	r18
    brcc    doExor6             ;[43]
 610:	28 f4       	brcc	.+10     	; 0x61c <doExor6>
    subi    x4, 1               ;[44]
 612:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
 614:	29 f4       	brne	.+10     	; 0x620 <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
 616:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
 618:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
 61a:	f9 cf       	rjmp	.-14     	; 0x60e <stuff6Delay>

0000061c <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
 61c:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
 61e:	56 e0       	ldi	r21, 0x06	; 6

00000620 <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
 620:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
 622:	08 bb       	out	0x18, r16	; 24
    brcc    doExor7             ;[49]
 624:	20 f4       	brcc	.+8      	; 0x62e <doExor7>
    subi    x4, 1               ;[50]
 626:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
 628:	21 f4       	brne	.+8      	; 0x632 <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
 62a:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
 62c:	f9 cf       	rjmp	.-14     	; 0x620 <common6>

0000062e <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
 62e:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
 630:	56 e0       	ldi	r21, 0x06	; 6

00000632 <common7>:
common7:
    ld      shift, y+           ;[53]
 632:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
 634:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
 636:	08 bb       	out	0x18, r16	; 24
    brne    txByteLoop          ;[57]
 638:	21 f6       	brne	.-120    	; 0x5c2 <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
 63a:	0c 7f       	andi	r16, 0xFC	; 252
    lds     x2, usbNewDeviceAddr;[59]
 63c:	10 91 92 00 	lds	r17, 0x0092
    lsl     x2                  ;[61] we compare with left shifted address
 640:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
 642:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
 644:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
 646:	08 bb       	out	0x18, r16	; 24
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
 648:	11 f0       	breq	.+4      	; 0x64e <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
 64a:	10 93 8b 00 	sts	0x008B, r17

0000064e <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
 64e:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[04]
 650:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE         ;[05]
 652:	01 60       	ori	r16, 0x01	; 1
    in      x2, USBDDR          ;[06]
 654:	17 b3       	in	r17, 0x17	; 23
    cbr     x2, USBMASK         ;[07] set both pins to input
 656:	1c 7f       	andi	r17, 0xFC	; 252
    mov     x3, x1              ;[08]
 658:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
 65a:	4c 7f       	andi	r20, 0xFC	; 252
    pop     x4                  ;[10]
 65c:	5f 91       	pop	r21
    nop2                        ;[12]
 65e:	00 c0       	rjmp	.+0      	; 0x660 <skipAddrAssign+0x12>
    nop2                        ;[14]
 660:	00 c0       	rjmp	.+0      	; 0x662 <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
 662:	08 bb       	out	0x18, r16	; 24
    out     USBDDR, x2          ;[17] <-- release bus now
 664:	17 bb       	out	0x17, r17	; 23
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
 666:	48 bb       	out	0x18, r20	; 24
    rjmp    doReturn
 668:	66 cf       	rjmp	.-308    	; 0x536 <doReturn>

0000066a <uartInit>:
uchar    urptr, uwptr, irptr, iwptr;
uchar    rx_buf[RX_SIZE+HW_CDC_BULK_IN_SIZE], tx_buf[TX_SIZE];


void uartInit(ulong baudrate, uchar parity, uchar stopbits, uchar databits)
{
 66a:	cf 92       	push	r12
 66c:	df 92       	push	r13
 66e:	ef 92       	push	r14
 670:	ff 92       	push	r15
 672:	0f 93       	push	r16
 674:	1f 93       	push	r17
 676:	cf 93       	push	r28
 678:	6b 01       	movw	r12, r22
 67a:	7c 01       	movw	r14, r24
 67c:	c4 2f       	mov	r28, r20
 67e:	12 2f       	mov	r17, r18
usbDWord_t   br;

    br.dword = ((F_CPU>>3)+(baudrate>>1)) / baudrate - 1;
 680:	dc 01       	movw	r26, r24
 682:	cb 01       	movw	r24, r22
 684:	b6 95       	lsr	r27
 686:	a7 95       	ror	r26
 688:	97 95       	ror	r25
 68a:	87 95       	ror	r24
 68c:	bc 01       	movw	r22, r24
 68e:	cd 01       	movw	r24, r26
 690:	60 5a       	subi	r22, 0xA0	; 160
 692:	7c 41       	sbci	r23, 0x1C	; 28
 694:	89 4e       	sbci	r24, 0xE9	; 233
 696:	9f 4f       	sbci	r25, 0xFF	; 255
 698:	a7 01       	movw	r20, r14
 69a:	96 01       	movw	r18, r12
 69c:	9b d1       	rcall	.+822    	; 0x9d4 <__udivmodsi4>
 69e:	69 01       	movw	r12, r18
 6a0:	7a 01       	movw	r14, r20
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	c8 1a       	sub	r12, r24
 6a6:	d1 08       	sbc	r13, r1
 6a8:	e1 08       	sbc	r14, r1
 6aa:	f1 08       	sbc	r15, r1
	UCSR0A  |= (1<<U2X0);
 6ac:	59 9a       	sbi	0x0b, 1	; 11

#if DEBUG_LEVEL < 1
    /*    USART configuration    */
    UCSR0B  = 0;
 6ae:	1a b8       	out	0x0a, r1	; 10
    UCSR0C  = URSEL_MASK | ((parity==1? 3:parity)<<UPM00) | ((stopbits>>1)<<USBS0) | ((databits-5)<<UCSZ00);
 6b0:	c1 30       	cpi	r28, 0x01	; 1
 6b2:	31 f0       	breq	.+12     	; 0x6c0 <uartInit+0x56>
 6b4:	20 e1       	ldi	r18, 0x10	; 16
 6b6:	c2 9f       	mul	r28, r18
 6b8:	a0 01       	movw	r20, r0
 6ba:	11 24       	eor	r1, r1
 6bc:	40 68       	ori	r20, 0x80	; 128
 6be:	01 c0       	rjmp	.+2      	; 0x6c2 <uartInit+0x58>
 6c0:	40 eb       	ldi	r20, 0xB0	; 176
 6c2:	16 95       	lsr	r17
 6c4:	28 e0       	ldi	r18, 0x08	; 8
 6c6:	12 9f       	mul	r17, r18
 6c8:	c0 01       	movw	r24, r0
 6ca:	11 24       	eor	r1, r1
 6cc:	10 e0       	ldi	r17, 0x00	; 0
 6ce:	05 50       	subi	r16, 0x05	; 5
 6d0:	11 09       	sbc	r17, r1
 6d2:	00 0f       	add	r16, r16
 6d4:	11 1f       	adc	r17, r17
 6d6:	08 2b       	or	r16, r24
 6d8:	40 2b       	or	r20, r16
 6da:	40 bd       	out	0x20, r20	; 32
    UBRR0L  = br.bytes[0];
 6dc:	c9 b8       	out	0x09, r12	; 9
    UBRR0H  = br.bytes[1];
 6de:	d0 bc       	out	0x20, r13	; 32
#else
    DBG1(0xf0, br.bytes, 2);
#endif /* DEBUG_LEVEL */

    UCSR0B  = (1<<RXEN0) | (1<<TXEN0);
 6e0:	88 e1       	ldi	r24, 0x18	; 24
 6e2:	8a b9       	out	0x0a, r24	; 10

	UART_CTRL_DDR	= (1<<UART_CTRL_DTR) | (1<<UART_CTRL_RTS);
 6e4:	84 bb       	out	0x14, r24	; 20
	UART_CTRL_PORT	= 0xff;
 6e6:	8f ef       	ldi	r24, 0xFF	; 255
 6e8:	85 bb       	out	0x15, r24	; 21
#ifdef UART_INVERT
	DDRB	|= (1<<PB1)|(1<<PB0);
	PCMSK1	|= (1<<PCINT9)|(1<<PCINT8);
	PCICR	|= (1<<PCIE1);
#endif
}
 6ea:	cf 91       	pop	r28
 6ec:	1f 91       	pop	r17
 6ee:	0f 91       	pop	r16
 6f0:	ff 90       	pop	r15
 6f2:	ef 90       	pop	r14
 6f4:	df 90       	pop	r13
 6f6:	cf 90       	pop	r12
 6f8:	08 95       	ret

000006fa <uartPoll>:

void uartPoll(void)
{
 6fa:	cf 93       	push	r28
 6fc:	df 93       	push	r29
	uchar		next;

	/*  device => RS-232C  */
	while( (UCSR0A&(1<<UDRE0)) && uwptr!=irptr && (UART_CTRL_PIN&(1<<UART_CTRL_CTS)) ) {
 6fe:	5d 9b       	sbis	0x0b, 5	; 11
 700:	1f c0       	rjmp	.+62     	; 0x740 <uartPoll+0x46>
 702:	e0 91 42 02 	lds	r30, 0x0242
 706:	80 91 41 02 	lds	r24, 0x0241
 70a:	8e 17       	cp	r24, r30
 70c:	c9 f0       	breq	.+50     	; 0x740 <uartPoll+0x46>
 70e:	9d 9b       	sbis	0x13, 5	; 19
 710:	17 c0       	rjmp	.+46     	; 0x740 <uartPoll+0x46>
        UDR0    = tx_buf[irptr];
 712:	f0 e0       	ldi	r31, 0x00	; 0
 714:	e0 5c       	subi	r30, 0xC0	; 192
 716:	fe 4f       	sbci	r31, 0xFE	; 254
 718:	80 81       	ld	r24, Z
 71a:	8c b9       	out	0x0c, r24	; 12
        irptr   = (irptr+1) & TX_MASK;
 71c:	80 91 42 02 	lds	r24, 0x0242
 720:	8f 5f       	subi	r24, 0xFF	; 255
 722:	80 93 42 02 	sts	0x0242, r24

        if( usbAllRequestsAreDisabled() && uartTxBytesFree()>HW_CDC_BULK_OUT_SIZE ) {
 726:	90 91 91 00 	lds	r25, 0x0091
 72a:	97 ff       	sbrs	r25, 7
 72c:	e8 cf       	rjmp	.-48     	; 0x6fe <uartPoll+0x4>
/* The following function returns the amount of bytes available in the TX
 * buffer before we have an overflow.
 */
static inline uchar uartTxBytesFree(void)
{
    return (irptr - uwptr - 1) & TX_MASK;
 72e:	90 91 41 02 	lds	r25, 0x0241
 732:	89 1b       	sub	r24, r25
 734:	81 50       	subi	r24, 0x01	; 1
 736:	89 30       	cpi	r24, 0x09	; 9
 738:	10 f3       	brcs	.-60     	; 0x6fe <uartPoll+0x4>
            usbEnableAllRequests();
 73a:	10 92 91 00 	sts	0x0091, r1
 73e:	df cf       	rjmp	.-66     	; 0x6fe <uartPoll+0x4>
    }

	/*  device <= RS-232C  */
	while( UCSR0A&(1<<RXC0) ) {
	    next = (iwptr+1) & RX_MASK;
		if( next!=urptr ) {
 740:	20 91 40 02 	lds	r18, 0x0240
        }
    }

	/*  device <= RS-232C  */
	while( UCSR0A&(1<<RXC0) ) {
	    next = (iwptr+1) & RX_MASK;
 744:	e0 91 3f 01 	lds	r30, 0x013F
 748:	81 e0       	ldi	r24, 0x01	; 1
 74a:	8e 0f       	add	r24, r30
 74c:	8f 77       	andi	r24, 0x7F	; 127
            usbEnableAllRequests();
        }
    }

	/*  device <= RS-232C  */
	while( UCSR0A&(1<<RXC0) ) {
 74e:	5f 9b       	sbis	0x0b, 7	; 11
 750:	0e c0       	rjmp	.+28     	; 0x76e <uartPoll+0x74>
	    next = (iwptr+1) & RX_MASK;
		if( next!=urptr ) {
 752:	82 17       	cp	r24, r18
 754:	59 f0       	breq	.+22     	; 0x76c <uartPoll+0x72>
	        uchar   status, data;

	        status  = UCSR0A;
 756:	9b b1       	in	r25, 0x0b	; 11
	        data    = UDR0;
 758:	3c b1       	in	r19, 0x0c	; 12
	        status  &= (1<<FE0) | (1<<DOR0) | (1<<UPE0);
 75a:	9c 71       	andi	r25, 0x1C	; 28
	        if(status == 0) { /* no receiver error occurred */
 75c:	c1 f7       	brne	.-16     	; 0x74e <uartPoll+0x54>
	            rx_buf[iwptr] = data;
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	e9 54       	subi	r30, 0x49	; 73
 762:	ff 4f       	sbci	r31, 0xFF	; 255
 764:	30 83       	st	Z, r19
	            iwptr = next;
 766:	80 93 3f 01 	sts	0x013F, r24
 76a:	ec cf       	rjmp	.-40     	; 0x744 <uartPoll+0x4a>
	        }
		}
		else {
			UART_CTRL_PORT	&= ~(1<<UART_CTRL_RTS);
 76c:	ac 98       	cbi	0x15, 4	; 21
			break;
		}
    }

	/*  USB <= device  */
    if( usbInterruptIsReady() && (iwptr!=urptr || sendEmptyFrame) ) {
 76e:	80 91 7f 00 	lds	r24, 0x007F
 772:	84 ff       	sbrs	r24, 4
 774:	36 c0       	rjmp	.+108    	; 0x7e2 <uartPoll+0xe8>
 776:	c0 91 3f 01 	lds	r28, 0x013F
 77a:	80 91 40 02 	lds	r24, 0x0240
 77e:	c8 13       	cpse	r28, r24
 780:	04 c0       	rjmp	.+8      	; 0x78a <uartPoll+0x90>
 782:	90 91 43 02 	lds	r25, 0x0243
 786:	99 23       	and	r25, r25
 788:	61 f1       	breq	.+88     	; 0x7e2 <uartPoll+0xe8>
        uchar   bytesRead, i;

        bytesRead = (iwptr-urptr) & RX_MASK;
 78a:	c8 1b       	sub	r28, r24
 78c:	cf 77       	andi	r28, 0x7F	; 127
 78e:	c9 30       	cpi	r28, 0x09	; 9
 790:	08 f0       	brcs	.+2      	; 0x794 <uartPoll+0x9a>
 792:	c8 e0       	ldi	r28, 0x08	; 8
        if(bytesRead>HW_CDC_BULK_IN_SIZE)
            bytesRead = HW_CDC_BULK_IN_SIZE;
		next	= urptr + bytesRead;
 794:	dc 2f       	mov	r29, r28
 796:	d8 0f       	add	r29, r24
		if( next>=RX_SIZE ) {
 798:	d7 ff       	sbrs	r29, 7
 79a:	0e c0       	rjmp	.+28     	; 0x7b8 <uartPoll+0xbe>
			next &= RX_MASK;
 79c:	df 77       	andi	r29, 0x7F	; 127
 79e:	27 eb       	ldi	r18, 0xB7	; 183
 7a0:	30 e0       	ldi	r19, 0x00	; 0
			for( i=0; i<next; i++ )
 7a2:	f9 01       	movw	r30, r18
 7a4:	9e 2f       	mov	r25, r30
 7a6:	92 1b       	sub	r25, r18
 7a8:	9d 17       	cp	r25, r29
 7aa:	30 f4       	brcc	.+12     	; 0x7b8 <uartPoll+0xbe>
				rx_buf[RX_SIZE+i]	= rx_buf[i];
 7ac:	91 91       	ld	r25, Z+
 7ae:	df 01       	movw	r26, r30
 7b0:	a1 58       	subi	r26, 0x81	; 129
 7b2:	bf 4f       	sbci	r27, 0xFF	; 255
 7b4:	9c 93       	st	X, r25
 7b6:	f6 cf       	rjmp	.-20     	; 0x7a4 <uartPoll+0xaa>
		}
        usbSetInterrupt(rx_buf+urptr, bytesRead);
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	6c 2f       	mov	r22, r28
 7bc:	89 54       	subi	r24, 0x49	; 73
 7be:	9f 4f       	sbci	r25, 0xFF	; 255
 7c0:	b7 dc       	rcall	.-1682   	; 0x130 <usbSetInterrupt>
        urptr   = next;
 7c2:	d0 93 40 02 	sts	0x0240, r29
		if( bytesRead )
 7c6:	cc 23       	and	r28, r28
 7c8:	49 f0       	breq	.+18     	; 0x7dc <uartPoll+0xe2>
			UART_CTRL_PORT	|= (1<<UART_CTRL_RTS);
 7ca:	ac 9a       	sbi	0x15, 4	; 21

        /* send an empty block after last data block to indicate transfer end */
        sendEmptyFrame = (bytesRead==HW_CDC_BULK_IN_SIZE && iwptr==urptr)? 1:0;
 7cc:	c8 30       	cpi	r28, 0x08	; 8
 7ce:	31 f4       	brne	.+12     	; 0x7dc <uartPoll+0xe2>
 7d0:	81 e0       	ldi	r24, 0x01	; 1
 7d2:	20 91 3f 01 	lds	r18, 0x013F
 7d6:	90 91 40 02 	lds	r25, 0x0240
 7da:	29 13       	cpse	r18, r25
 7dc:	80 e0       	ldi	r24, 0x00	; 0
 7de:	80 93 43 02 	sts	0x0243, r24
    }
}
 7e2:	df 91       	pop	r29
 7e4:	cf 91       	pop	r28
 7e6:	08 95       	ret

000007e8 <resetUart>:

static uchar        stopbit, parity, databit;
static usbDWord_t   baud;

static void resetUart(void)
{
 7e8:	0f 93       	push	r16

    uartInit(baud.dword, parity, stopbit, databit);
 7ea:	60 91 6c 00 	lds	r22, 0x006C
 7ee:	70 91 6d 00 	lds	r23, 0x006D
 7f2:	80 91 6e 00 	lds	r24, 0x006E
 7f6:	90 91 6f 00 	lds	r25, 0x006F
 7fa:	00 91 70 00 	lds	r16, 0x0070
 7fe:	20 91 72 00 	lds	r18, 0x0072
 802:	40 91 71 00 	lds	r20, 0x0071
 806:	31 df       	rcall	.-414    	; 0x66a <uartInit>
    irptr    = 0;
 808:	10 92 42 02 	sts	0x0242, r1
    iwptr    = 0;
 80c:	10 92 3f 01 	sts	0x013F, r1
    urptr    = 0;
 810:	10 92 40 02 	sts	0x0240, r1
    uwptr    = 0;
 814:	10 92 41 02 	sts	0x0241, r1
}
 818:	0f 91       	pop	r16
 81a:	08 95       	ret

0000081c <usbFunctionDescriptor>:


uchar usbFunctionDescriptor(usbRequest_t *rq)
{

    if(rq->wValue.bytes[1] == USBDESCR_DEVICE){
 81c:	fc 01       	movw	r30, r24
 81e:	83 81       	ldd	r24, Z+3	; 0x03
 820:	81 30       	cpi	r24, 0x01	; 1
 822:	49 f4       	brne	.+18     	; 0x836 <usbFunctionDescriptor+0x1a>
        usbMsgPtr = (uchar *)usbDescriptorDevice;
 824:	86 e2       	ldi	r24, 0x26	; 38
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	90 93 90 00 	sts	0x0090, r25
 82c:	80 93 8f 00 	sts	0x008F, r24
        return usbDescriptorDevice[0];
 830:	80 91 26 00 	lds	r24, 0x0026
 834:	08 95       	ret
    }else{  /* must be config descriptor */
        usbMsgPtr = (uchar *)configDescrCDC;
 836:	8e e6       	ldi	r24, 0x6E	; 110
 838:	90 e0       	ldi	r25, 0x00	; 0
 83a:	90 93 90 00 	sts	0x0090, r25
 83e:	80 93 8f 00 	sts	0x008F, r24
        return sizeof(configDescrCDC);
 842:	83 e4       	ldi	r24, 0x43	; 67
    }
}
 844:	08 95       	ret

00000846 <usbFunctionSetup>:
/* ------------------------------------------------------------------------- */
/* ----------------------------- USB interface ----------------------------- */
/* ------------------------------------------------------------------------- */

uchar usbFunctionSetup(uchar data[8])
{
 846:	fc 01       	movw	r30, r24
usbRequest_t    *rq = (void *)data;

    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */
 848:	80 81       	ld	r24, Z
 84a:	80 76       	andi	r24, 0x60	; 96
 84c:	80 32       	cpi	r24, 0x20	; 32
 84e:	c9 f4       	brne	.+50     	; 0x882 <usbFunctionSetup+0x3c>

        if( rq->bRequest==GET_LINE_CODING || rq->bRequest==SET_LINE_CODING ){
 850:	81 81       	ldd	r24, Z+1	; 0x01
 852:	90 ee       	ldi	r25, 0xE0	; 224
 854:	98 0f       	add	r25, r24
 856:	92 30       	cpi	r25, 0x02	; 2
 858:	b0 f0       	brcs	.+44     	; 0x886 <usbFunctionSetup+0x40>
            return 0xff;
        /*    GET_LINE_CODING -> usbFunctionRead()    */
        /*    SET_LINE_CODING -> usbFunctionWrite()    */
        }
        if(rq->bRequest == SET_CONTROL_LINE_STATE){
 85a:	82 32       	cpi	r24, 0x22	; 34
 85c:	61 f4       	brne	.+24     	; 0x876 <usbFunctionSetup+0x30>
            UART_CTRL_PORT	= (UART_CTRL_PORT&~(1<<UART_CTRL_DTR))|((rq->wValue.word&1)<<UART_CTRL_DTR);
 85e:	82 81       	ldd	r24, Z+2	; 0x02
 860:	80 fd       	sbrc	r24, 0
 862:	ab 9a       	sbi	0x15, 3	; 21
 864:	80 ff       	sbrs	r24, 0
 866:	ab 98       	cbi	0x15, 3	; 21

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
            /* Report serial state (carrier detect). On several Unix platforms,
             * tty devices can only be opened when carrier detect is set.
             */
            if( intr3Status==0 )
 868:	80 91 73 00 	lds	r24, 0x0073
 86c:	81 11       	cpse	r24, r1
 86e:	03 c0       	rjmp	.+6      	; 0x876 <usbFunctionSetup+0x30>
                intr3Status = 2;
 870:	82 e0       	ldi	r24, 0x02	; 2
 872:	80 93 73 00 	sts	0x0073, r24
#endif
        }
#if 1
        /*  Prepare bulk-in endpoint to respond to early termination   */
        if((rq->bmRequestType & USBRQ_DIR_MASK) == USBRQ_DIR_HOST_TO_DEVICE)
 876:	80 81       	ld	r24, Z
 878:	87 fd       	sbrc	r24, 7
 87a:	03 c0       	rjmp	.+6      	; 0x882 <usbFunctionSetup+0x3c>
            sendEmptyFrame  = 1;
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	80 93 43 02 	sts	0x0243, r24
#endif
    }

    return 0;
 882:	80 e0       	ldi	r24, 0x00	; 0
 884:	08 95       	ret
usbRequest_t    *rq = (void *)data;

    if((rq->bmRequestType & USBRQ_TYPE_MASK) == USBRQ_TYPE_CLASS){    /* class request type */

        if( rq->bRequest==GET_LINE_CODING || rq->bRequest==SET_LINE_CODING ){
            return 0xff;
 886:	8f ef       	ldi	r24, 0xFF	; 255
            sendEmptyFrame  = 1;
#endif
    }

    return 0;
}
 888:	08 95       	ret

0000088a <usbFunctionRead>:
/*---------------------------------------------------------------------------*/
/* usbFunctionRead                                                          */
/*---------------------------------------------------------------------------*/

uchar usbFunctionRead( uchar *data, uchar len )
{
 88a:	fc 01       	movw	r30, r24

    data[0] = baud.bytes[0];
 88c:	ac e6       	ldi	r26, 0x6C	; 108
 88e:	b0 e0       	ldi	r27, 0x00	; 0
 890:	8c 91       	ld	r24, X
 892:	80 83       	st	Z, r24
    data[1] = baud.bytes[1];
 894:	11 96       	adiw	r26, 0x01	; 1
 896:	8c 91       	ld	r24, X
 898:	11 97       	sbiw	r26, 0x01	; 1
 89a:	81 83       	std	Z+1, r24	; 0x01
    data[2] = baud.bytes[2];
 89c:	12 96       	adiw	r26, 0x02	; 2
 89e:	8c 91       	ld	r24, X
 8a0:	12 97       	sbiw	r26, 0x02	; 2
 8a2:	82 83       	std	Z+2, r24	; 0x02
    data[3] = baud.bytes[3];
 8a4:	13 96       	adiw	r26, 0x03	; 3
 8a6:	8c 91       	ld	r24, X
 8a8:	83 83       	std	Z+3, r24	; 0x03
    data[4] = stopbit;
 8aa:	80 91 72 00 	lds	r24, 0x0072
 8ae:	84 83       	std	Z+4, r24	; 0x04
    data[5] = parity;
 8b0:	80 91 71 00 	lds	r24, 0x0071
 8b4:	85 83       	std	Z+5, r24	; 0x05
    data[6] = databit;
 8b6:	80 91 70 00 	lds	r24, 0x0070
 8ba:	86 83       	std	Z+6, r24	; 0x06

    return 7;
}
 8bc:	87 e0       	ldi	r24, 0x07	; 7
 8be:	08 95       	ret

000008c0 <usbFunctionWrite>:
/*---------------------------------------------------------------------------*/
/* usbFunctionWrite                                                          */
/*---------------------------------------------------------------------------*/

uchar usbFunctionWrite( uchar *data, uchar len )
{
 8c0:	fc 01       	movw	r30, r24

    /*    SET_LINE_CODING    */
    baud.bytes[0] = data[0];
 8c2:	80 81       	ld	r24, Z
 8c4:	80 93 6c 00 	sts	0x006C, r24
    baud.bytes[1] = data[1];
 8c8:	81 81       	ldd	r24, Z+1	; 0x01
 8ca:	80 93 6d 00 	sts	0x006D, r24
    baud.bytes[2] = data[2];
 8ce:	82 81       	ldd	r24, Z+2	; 0x02
 8d0:	80 93 6e 00 	sts	0x006E, r24
    baud.bytes[3] = data[3];
 8d4:	83 81       	ldd	r24, Z+3	; 0x03
 8d6:	80 93 6f 00 	sts	0x006F, r24

    stopbit    = data[4];
 8da:	84 81       	ldd	r24, Z+4	; 0x04
 8dc:	80 93 72 00 	sts	0x0072, r24
    parity     = data[5];
 8e0:	95 81       	ldd	r25, Z+5	; 0x05
 8e2:	90 93 71 00 	sts	0x0071, r25
    databit    = data[6];
 8e6:	26 81       	ldd	r18, Z+6	; 0x06
 8e8:	20 93 70 00 	sts	0x0070, r18

    if( parity>2 )
 8ec:	93 30       	cpi	r25, 0x03	; 3
 8ee:	10 f0       	brcs	.+4      	; 0x8f4 <usbFunctionWrite+0x34>
        parity    = 0;
 8f0:	10 92 71 00 	sts	0x0071, r1
    if( stopbit==1 )
 8f4:	81 30       	cpi	r24, 0x01	; 1
 8f6:	11 f4       	brne	.+4      	; 0x8fc <usbFunctionWrite+0x3c>
        stopbit    = 0;
 8f8:	10 92 72 00 	sts	0x0072, r1

    resetUart();
 8fc:	75 df       	rcall	.-278    	; 0x7e8 <resetUart>

    return 1;
}
 8fe:	81 e0       	ldi	r24, 0x01	; 1
 900:	08 95       	ret

00000902 <usbFunctionWriteOut>:


void usbFunctionWriteOut( uchar *data, uchar len )
{
 902:	dc 01       	movw	r26, r24
    /*  usb -> rs232c:  transmit char    */
    for( ; len; len-- ) {
        uchar   uwnxt;

        uwnxt = (uwptr+1) & TX_MASK;
        if( uwnxt!=irptr ) {
 904:	90 91 42 02 	lds	r25, 0x0242
 908:	e0 91 41 02 	lds	r30, 0x0241

void usbFunctionWriteOut( uchar *data, uchar len )
{

    /*  usb -> rs232c:  transmit char    */
    for( ; len; len-- ) {
 90c:	66 23       	and	r22, r22
 90e:	71 f0       	breq	.+28     	; 0x92c <usbFunctionWriteOut+0x2a>
        uchar   uwnxt;

        uwnxt = (uwptr+1) & TX_MASK;
 910:	81 e0       	ldi	r24, 0x01	; 1
 912:	8e 0f       	add	r24, r30
        if( uwnxt!=irptr ) {
 914:	89 17       	cp	r24, r25
 916:	41 f0       	breq	.+16     	; 0x928 <usbFunctionWriteOut+0x26>
            tx_buf[uwptr] = *data++;
 918:	2c 91       	ld	r18, X
 91a:	f0 e0       	ldi	r31, 0x00	; 0
 91c:	e0 5c       	subi	r30, 0xC0	; 192
 91e:	fe 4f       	sbci	r31, 0xFE	; 254
 920:	20 83       	st	Z, r18
            uwptr = uwnxt;
 922:	80 93 41 02 	sts	0x0241, r24
    for( ; len; len-- ) {
        uchar   uwnxt;

        uwnxt = (uwptr+1) & TX_MASK;
        if( uwnxt!=irptr ) {
            tx_buf[uwptr] = *data++;
 926:	11 96       	adiw	r26, 0x01	; 1

void usbFunctionWriteOut( uchar *data, uchar len )
{

    /*  usb -> rs232c:  transmit char    */
    for( ; len; len-- ) {
 928:	61 50       	subi	r22, 0x01	; 1
 92a:	ee cf       	rjmp	.-36     	; 0x908 <usbFunctionWriteOut+0x6>
 92c:	91 50       	subi	r25, 0x01	; 1
 92e:	9e 1b       	sub	r25, r30
            uwptr = uwnxt;
        }
    }

    /*  postpone receiving next data    */
    if( uartTxBytesFree()<=HW_CDC_BULK_OUT_SIZE )
 930:	99 30       	cpi	r25, 0x09	; 9
 932:	18 f4       	brcc	.+6      	; 0x93a <usbFunctionWriteOut+0x38>
        usbDisableAllRequests();
 934:	8f ef       	ldi	r24, 0xFF	; 255
 936:	80 93 91 00 	sts	0x0091, r24
 93a:	08 95       	ret

0000093c <main>:
__attribute__ ((__always_inline__))
void wdt_enable (const uint8_t value)
{
	if (_SFR_IO_REG_P (_WD_CONTROL_REG))
	{
		__asm__ __volatile__ (
 93c:	9e e0       	ldi	r25, 0x0E	; 14
 93e:	88 e1       	ldi	r24, 0x18	; 24
 940:	0f b6       	in	r0, 0x3f	; 63
 942:	f8 94       	cli
 944:	a8 95       	wdr
 946:	81 bd       	out	0x21, r24	; 33
 948:	0f be       	out	0x3f, r0	; 63
 94a:	91 bd       	out	0x21, r25	; 33

static void hardwareInit(void)
{

    /* activate pull-ups except on USB lines */
    USB_CFG_IOPORT   = (uchar)~((1<<USB_CFG_DMINUS_BIT)|(1<<USB_CFG_DPLUS_BIT));
 94c:	8c ef       	ldi	r24, 0xFC	; 252
 94e:	88 bb       	out	0x18, r24	; 24
    /* all pins input except USB (-> USB reset) */
#ifdef USB_CFG_PULLUP_IOPORT    /* use usbDeviceConnect()/usbDeviceDisconnect() if available */
    USBDDR    = 0;    /* we do RESET by deactivating pullup */
    usbDeviceDisconnect();
#else
    USBDDR    = (1<<USB_CFG_DMINUS_BIT)|(1<<USB_CFG_DPLUS_BIT);
 950:	83 e0       	ldi	r24, 0x03	; 3
 952:	87 bb       	out	0x17, r24	; 23
#endif

    /* 250 ms disconnect */
    wdt_reset();
 954:	a8 95       	wdr
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 956:	2f eb       	ldi	r18, 0xBF	; 191
 958:	87 e2       	ldi	r24, 0x27	; 39
 95a:	99 e0       	ldi	r25, 0x09	; 9
 95c:	21 50       	subi	r18, 0x01	; 1
 95e:	80 40       	sbci	r24, 0x00	; 0
 960:	90 40       	sbci	r25, 0x00	; 0
 962:	e1 f7       	brne	.-8      	; 0x95c <main+0x20>
 964:	00 c0       	rjmp	.+0      	; 0x966 <main+0x2a>
 966:	00 00       	nop
    _delay_ms(250);

#ifdef USB_CFG_PULLUP_IOPORT
    usbDeviceConnect();
#else
    USBDDR    = 0;      /*  remove USB reset condition */
 968:	17 ba       	out	0x17, r1	; 23
#endif

    /*    USART configuration    */
    baud.dword  = UART_DEFAULT_BPS;
 96a:	80 e8       	ldi	r24, 0x80	; 128
 96c:	95 e2       	ldi	r25, 0x25	; 37
 96e:	a0 e0       	ldi	r26, 0x00	; 0
 970:	b0 e0       	ldi	r27, 0x00	; 0
 972:	80 93 6c 00 	sts	0x006C, r24
 976:	90 93 6d 00 	sts	0x006D, r25
 97a:	a0 93 6e 00 	sts	0x006E, r26
 97e:	b0 93 6f 00 	sts	0x006F, r27
    stopbit = 0;
 982:	10 92 72 00 	sts	0x0072, r1
    parity  = 0;
 986:	10 92 71 00 	sts	0x0071, r1
    databit = 8;
 98a:	88 e0       	ldi	r24, 0x08	; 8
 98c:	80 93 70 00 	sts	0x0070, r24
    resetUart();
 990:	2b df       	rcall	.-426    	; 0x7e8 <resetUart>
{

    wdt_enable(WDTO_1S);
    odDebugInit();
    hardwareInit();
    usbInit();
 992:	f7 dc       	rcall	.-1554   	; 0x382 <usbInit>

    intr3Status = 0;
 994:	10 92 73 00 	sts	0x0073, r1
    sendEmptyFrame  = 0;
 998:	10 92 43 02 	sts	0x0243, r1

    sei();
 99c:	78 94       	sei
    for(;;){    /* main event loop */
        wdt_reset();
 99e:	a8 95       	wdr
        usbPoll();
 9a0:	cd db       	rcall	.-2150   	; 0x13c <usbPoll>
        uartPoll();
 9a2:	ab de       	rcall	.-682    	; 0x6fa <uartPoll>

#if USB_CFG_HAVE_INTRIN_ENDPOINT3
        /* We need to report rx and tx carrier after open attempt */
        if(intr3Status != 0 && usbInterruptIsReady3()){
 9a4:	80 91 73 00 	lds	r24, 0x0073
 9a8:	88 23       	and	r24, r24
 9aa:	c9 f3       	breq	.-14     	; 0x99e <main+0x62>
 9ac:	90 91 ab 00 	lds	r25, 0x00AB
 9b0:	94 ff       	sbrs	r25, 4
 9b2:	f5 cf       	rjmp	.-22     	; 0x99e <main+0x62>
            static uchar serialStateNotification[10] = {0xa1, 0x20, 0, 0, 0, 0, 2, 0, 3, 0};

            if(intr3Status == 2){
 9b4:	82 30       	cpi	r24, 0x02	; 2
 9b6:	21 f4       	brne	.+8      	; 0x9c0 <main+0x84>
                usbSetInterrupt3(serialStateNotification, 8);
 9b8:	68 e0       	ldi	r22, 0x08	; 8
 9ba:	82 e6       	ldi	r24, 0x62	; 98
 9bc:	90 e0       	ldi	r25, 0x00	; 0
 9be:	03 c0       	rjmp	.+6      	; 0x9c6 <main+0x8a>
            }else{
                usbSetInterrupt3(serialStateNotification+8, 2);
 9c0:	62 e0       	ldi	r22, 0x02	; 2
 9c2:	8a e6       	ldi	r24, 0x6A	; 106
 9c4:	90 e0       	ldi	r25, 0x00	; 0
 9c6:	b7 db       	rcall	.-2194   	; 0x136 <usbSetInterrupt3>
            }
            intr3Status--;
 9c8:	80 91 73 00 	lds	r24, 0x0073
 9cc:	81 50       	subi	r24, 0x01	; 1
 9ce:	80 93 73 00 	sts	0x0073, r24
 9d2:	e5 cf       	rjmp	.-54     	; 0x99e <main+0x62>

000009d4 <__udivmodsi4>:
 9d4:	a1 e2       	ldi	r26, 0x21	; 33
 9d6:	1a 2e       	mov	r1, r26
 9d8:	aa 1b       	sub	r26, r26
 9da:	bb 1b       	sub	r27, r27
 9dc:	fd 01       	movw	r30, r26
 9de:	0d c0       	rjmp	.+26     	; 0x9fa <__udivmodsi4_ep>

000009e0 <__udivmodsi4_loop>:
 9e0:	aa 1f       	adc	r26, r26
 9e2:	bb 1f       	adc	r27, r27
 9e4:	ee 1f       	adc	r30, r30
 9e6:	ff 1f       	adc	r31, r31
 9e8:	a2 17       	cp	r26, r18
 9ea:	b3 07       	cpc	r27, r19
 9ec:	e4 07       	cpc	r30, r20
 9ee:	f5 07       	cpc	r31, r21
 9f0:	20 f0       	brcs	.+8      	; 0x9fa <__udivmodsi4_ep>
 9f2:	a2 1b       	sub	r26, r18
 9f4:	b3 0b       	sbc	r27, r19
 9f6:	e4 0b       	sbc	r30, r20
 9f8:	f5 0b       	sbc	r31, r21

000009fa <__udivmodsi4_ep>:
 9fa:	66 1f       	adc	r22, r22
 9fc:	77 1f       	adc	r23, r23
 9fe:	88 1f       	adc	r24, r24
 a00:	99 1f       	adc	r25, r25
 a02:	1a 94       	dec	r1
 a04:	69 f7       	brne	.-38     	; 0x9e0 <__udivmodsi4_loop>
 a06:	60 95       	com	r22
 a08:	70 95       	com	r23
 a0a:	80 95       	com	r24
 a0c:	90 95       	com	r25
 a0e:	9b 01       	movw	r18, r22
 a10:	ac 01       	movw	r20, r24
 a12:	bd 01       	movw	r22, r26
 a14:	cf 01       	movw	r24, r30
 a16:	08 95       	ret

00000a18 <_exit>:
 a18:	f8 94       	cli

00000a1a <__stop_program>:
 a1a:	ff cf       	rjmp	.-2      	; 0xa1a <__stop_program>
